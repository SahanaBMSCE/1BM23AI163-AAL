#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_NODES 26 

struct Node {
    int vertex;
    struct Node* next;
};

struct Graph {
    int numVertices;
    struct Node** adjLists;
    int* visited;
};

struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));
    graph->visited = (int*)malloc(vertices * sizeof(int));

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

void topologicalSortDFS(struct Graph* graph, int vertex, char* stack, int* top) {
    graph->visited[vertex] = 1;

    struct Node* temp = graph->adjLists[vertex];
    while (temp != NULL) {
        int adjVertex = temp->vertex;
        if (!graph->visited[adjVertex]) {
            topologicalSortDFS(graph, adjVertex, stack, top);
        }
        temp = temp->next;
    }

    stack[++(*top)] = (char)(vertex + 'A'); 
}

void topologicalSort(struct Graph* graph) {
    char stack[MAX_NODES];
    int top = -1;

    for (int i = 0; i < graph->numVertices; i++) {
        if (!graph->visited[i]) {
            topologicalSortDFS(graph, i, stack, &top);
        }
    }

    printf("Topological Sort: ");
    while (top >= 0) {
        printf("%c ", stack[top--]);
    }
    printf("\n");
}

int main() {
    int vertices;
    printf("Enter the number of vertices (1-26): ");
    scanf("%d", &vertices);

    if (vertices < 1 || vertices > 26) {
        printf("Invalid number of vertices. Must be between 1 and 26.\n");
        return 1;
    }

    struct Graph* graph = createGraph(vertices);

    printf("Enter edges (e.g., A B), then enter -1 to stop:\n");
    char src, dest;
    while (1) {
        scanf(" %c", &src); 
        if (src == '-') { 
            scanf("%*d"); 
            break;
        }
        scanf(" %c", &dest); 

       
        int srcIndex = toupper(src) - 'A';
        int destIndex = toupper(dest) - 'A';

        if (srcIndex < 0 || srcIndex >= vertices || destIndex < 0 || destIndex >= vertices) {
            printf("Invalid vertex. Vertices must be between A and %c.\n", 'A' + vertices - 1);
            continue;
        }

        addEdge(graph, srcIndex, destIndex);
    }

    topologicalSort(graph);

    
    for (int i = 0; i < graph->numVertices; i++) {
        struct Node* temp = graph->adjLists[i];
        while (temp) {
            struct Node* next = temp->next;
            free(temp);
            temp = next;
        }
    }
    free(graph->adjLists);
    free(graph->visited);
    free(graph);

    return 0;
}
